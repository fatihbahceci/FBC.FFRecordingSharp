; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "FBC.FFRecordingSharp"
#define MyAppExeName "FBC.FFRecordingSharp.exe"
#define MyAppVersion GetFileVersion("..\Bin\" +MyAppExeName)


[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{D2FFB34F-56B8-475F-87BE-EAF872200079}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
ArchitecturesAllowed=x86 x64 arm64 ia64
ArchitecturesInstallIn64BitMode=x64 ia64

DefaultDirName={autopf}\{#MyAppName}
DefaultGroupName={#MyAppName}
AllowNoIcons=yes
LicenseFile=..\LICENSE
; Remove the following line to run in administrative install mode (install for all users.)
OutputBaseFilename=FBC.FFRecordingSharp.Setup.(v{#MyAppVersion})
SetupIconFile=..\FBC.FFRecordingSharp\fbc-icon-1.ico
Compression=lzma
SolidCompression=yes
WizardStyle=modern
VersionInfoVersion={#MyAppVersion}

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"

[Files]
Source: "..\Bin\{#MyAppExeName}"; DestDir: "{app}"; Flags: ignoreversion
Source: "..\Bin\FBC.FFRecordingSharp.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "..\Bin\FBC.FFRecordingSharp.runtimeconfig.json"; DestDir: "{app}"; Flags: ignoreversion
;FFMpeg
Source: "..\Bin\ffplay\ffmpeg.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "..\Bin\ffplay\ffplay.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "..\Bin\ffplay\ffprobe.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "..\Bin\ffplay\avcodec-60.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "..\Bin\ffplay\avdevice-60.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "..\Bin\ffplay\avfilter-9.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "..\Bin\ffplay\avformat-60.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "..\Bin\ffplay\avutil-58.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "..\Bin\ffplay\postproc-57.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "..\Bin\ffplay\swresample-4.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "..\Bin\ffplay\swscale-7.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "..\Bin\third\windowsdesktop-runtime-8.0.0-win-x64.exe"; DestDir: "{app}"; Flags: ignoreversion

Source: "..\Bin\third\vcredist_2010_x64.exe"; DestDir: "{app}"; Flags: ignoreversion; Check: IsWin64; AfterInstall: InstallVCRedist
Source: "..\Bin\third\vcredist_2010_x86.exe"; DestDir: "{app}"; Flags: ignoreversion; Check: not IsWin64; AfterInstall: InstallVCRedist

Source: "..\Bin\third\screen-capture-recorder.dll"; DestDir: "{app}"; Flags: regserver 32bit; Check: not IsWin64
Source: "..\Bin\third\screen-capture-recorder-x64.dll"; DestDir: "{app}"; Flags: regserver 64bit; Check: IsWin64
Source: "..\Bin\third\virtual-audio-capturer.dll"; DestDir: "{app}"; Flags: regserver 32bit; Check: not IsWin64
Source: "..\Bin\third\virtual-audio-capturer-x64.dll"; DestDir: "{app}"; Flags: regserver 64bit; Check: IsWin64

[Icons]
Name: "{group}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
Name: "{group}\{cm:UninstallProgram,{#MyAppName}}"; Filename: "{uninstallexe}"
Name: "{autodesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon

[Run]
Filename: "{app}\{#MyAppExeName}"; Flags: nowait postinstall skipifsilent; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"
;Filename: "{app}\Setup.Screen.Capturer.Recorder.v0.13.3.exe"; Parameters: "/silent"; Flags: nowait postinstall

;[InstallDelete]
;Type: files; Name: "{app}\Setup.Screen.Capturer.Recorder.v0.13.3.exe"

[Code]

function NeedsDotNet8: Boolean;
var
  sabri: String;
begin
  // Check if .NET 8 is installed
  if RegQueryStringValue(HKEY_LOCAL_MACHINE, 'SOFTWARE\Microsoft\NET Framework Setup\NDP\v8\Full', 'Install', sabri) then
  begin
    // .NET 8 is already installed
    Result := False;
  end
  else
  begin
    // .NET 8 is not installed
    Result := True;
  end;
end;

procedure InstallVCRedist();
var
    ErrorCode : Integer;
Begin
 if (IsWin64) then
    Begin
      Log('Installing vcredist_2010_x64...');
      ShellExec('', ExpandConstant('{app}\vcredist_2010_x64.exe'), '/passive /norestart', '', SW_SHOW, ewWaitUntilTerminated, ErrorCode);    
    End
    else
    Begin
      Log('Installing vcredist_2010_x86...');
      ShellExec('', ExpandConstant('{app}\Vvcredist_2010_x86.exe'), '/passive /norestart', '', SW_SHOW, ewWaitUntilTerminated, ErrorCode);    
    End;
End;

procedure CurStepChanged(CurStep: TSetupStep);
var
    ErrorCode : Integer;
begin
  if CurStep = ssPostInstall then //ssDone
  begin
    //ShellExec('', ExpandConstant('{tmp}\Microsoft CCR and DSS Runtime 2008 R3 Redistributable.exe'), ExpandConstant('/S /v/qn'), '', SW_HIDE, ewWaitUntilTerminated, ErrorCode)
    //ShellExec('', ExpandConstant('{app}\Setup.Screen.Capturer.Recorder.v0.13.3.exe'), '/VERYSILENT /NOICONS', '', SW_SHOW, ewWaitUntilTerminated, ErrorCode);
    if NeedsDotNet8 then
    Begin
      Log('Installing .net 8.0 Runtime...');
      ShellExec('', ExpandConstant('{app}\windowsdesktop-runtime-8.0.0-win-x64.exe'), '/SILENT', '', SW_SHOW, ewWaitUntilTerminated, ErrorCode);    
    End;
    //ShellExec('', ExpandConstant('{app}\{#MyAppExeName}'), '', '', SW_SHOW, ewNoWait, ErrorCode);
  end;
end;


